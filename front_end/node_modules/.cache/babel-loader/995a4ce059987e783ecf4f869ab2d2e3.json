{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers, useContractCall } from \"@usedapp/core\";\nimport Lottery from \"../chian-info/contracts/Lottery.json\";\nimport networkMapping from \"../chian-info/deployments/map.json\";\nimport { constants, utils } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nexport const useLottery = () => {\n  _s();\n\n  var _useContractCall;\n\n  const {\n    chainId,\n    error\n  } = useEthers();\n  const {\n    abi\n  } = Lottery;\n  const LotteryAddress = chainId ? networkMapping[\"42\"][\"Lottery\"][0] : constants.AddressZero;\n  const LotteryInterface = new utils.Interface(abi);\n  const LotteryContract = new Contract(LotteryAddress, LotteryInterface); // const { state , send : amount } = useContractFunction(LotteryContract, \"enter\" , {})\n  // console.log(state.status)\n  /// if (state.status === \"Success\"){\n  // amount({ value: utils.parseEther(\"0.00005\") })\n  //}\n  //const approveAndStake = ( amount: string ) => {\n  //return approvedErc20Send(LotteryAddress)\n  //}\n\n  const [fee] = (_useContractCall = useContractCall({\n    abi: LotteryInterface,\n    address: LotteryAddress,\n    method: \"getEntranceFee\",\n    args: []\n  })) !== null && _useContractCall !== void 0 ? _useContractCall : [];\n  return fee;\n};\n\n_s(useLottery, \"Iavu1JAjJ5qP0duN7xP3xE0ZFgE=\", false, function () {\n  return [useEthers, useContractCall];\n});","map":{"version":3,"sources":["D:/programing/Blockchain/smartcontract-lottery-main/front_end/src/hooks/useLottery.ts"],"names":["useEthers","useContractCall","Lottery","networkMapping","constants","utils","Contract","useLottery","chainId","error","abi","LotteryAddress","AddressZero","LotteryInterface","Interface","LotteryContract","fee","address","method","args"],"mappings":";;AAAA,SAA8BA,SAA9B,EAAyCC,eAAzC,QAAgE,eAAhE;AACA,OAAOC,OAAP,MAAoB,sCAApB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAASC,SAAT,EAAqBC,KAArB,QAAkC,QAAlC;AACA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAAA;;AAC5B,QAAM;AAACC,IAAAA,OAAD;AAAWC,IAAAA;AAAX,MAAoBT,SAAS,EAAnC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAUR,OAAhB;AACA,QAAMS,cAAc,GAAGH,OAAO,GAAGL,cAAc,CAAC,IAAD,CAAd,CAAqB,SAArB,EAAgC,CAAhC,CAAH,GAAwCC,SAAS,CAACQ,WAAhF;AACA,QAAMC,gBAAgB,GAAG,IAAIR,KAAK,CAACS,SAAV,CAAoBJ,GAApB,CAAzB;AACA,QAAMK,eAAe,GAAG,IAAIT,QAAJ,CAAaK,cAAb,EAA6BE,gBAA7B,CAAxB,CAL4B,CAQ7B;AAEA;AACA;AACA;AAEC;AAMA;AACG;AACH;;AAGA,QAAM,CAACG,GAAD,wBAAaf,eAAe,CAAC;AACnCS,IAAAA,GAAG,EAAEG,gBAD8B;AAEnCI,IAAAA,OAAO,EAAEN,cAF0B;AAGnCO,IAAAA,MAAM,EAAE,gBAH2B;AAInCC,IAAAA,IAAI,EAAE;AAJ6B,GAAD,CAA5B,+DAKI,EALV;AAMA,SAAOH,GAAP;AAMH,CArCM;;GAAMT,U;UACiBP,S,EAwBPC,e","sourcesContent":["import { useContractFunction, useEthers, useContractCall } from \"@usedapp/core\"\r\nimport Lottery from \"../chian-info/contracts/Lottery.json\"\r\nimport networkMapping from \"../chian-info/deployments/map.json\";\r\nimport { constants , utils } from \"ethers\";\r\nimport { Contract } from \"@ethersproject/contracts\" \r\n\r\nexport const useLottery = () => {\r\n    const {chainId , error} = useEthers()\r\n    const { abi } = Lottery\r\n    const LotteryAddress = chainId ? networkMapping[\"42\"][\"Lottery\"][0] : constants.AddressZero\r\n    const LotteryInterface = new utils.Interface(abi)\r\n    const LotteryContract = new Contract(LotteryAddress, LotteryInterface)\r\n\r\n\r\n   // const { state , send : amount } = useContractFunction(LotteryContract, \"enter\" , {})\r\n\r\n   // console.log(state.status)\r\n   /// if (state.status === \"Success\"){\r\n   // amount({ value: utils.parseEther(\"0.00005\") })\r\n\r\n    //}\r\n      \r\n\r\n    \r\n    \r\n\r\n    //const approveAndStake = ( amount: string ) => {\r\n       //return approvedErc20Send(LotteryAddress)\r\n    //}\r\n\r\n    \r\n    const [fee]: any = useContractCall({\r\n    abi: LotteryInterface,\r\n    address: LotteryAddress,\r\n    method: \"getEntranceFee\",\r\n    args: [],\r\n        }) ?? [];\r\n    return fee;\r\n\r\n    \r\n\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}