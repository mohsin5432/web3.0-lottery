{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContractFunction, useEthers } from \"@usedapp/core\";\nimport Lottery from \"../chian-info/contracts/Lottery.json\";\nimport networkMapping from \"../chian-info/deployments/map.json\";\nimport { constants, utils } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nexport const useLottery = () => {\n  _s();\n\n  const {\n    chainId,\n    error\n  } = useEthers();\n  const {\n    abi\n  } = Lottery;\n  const LotteryAddress = chainId ? networkMapping[\"42\"][\"Lottery\"][0] : constants.AddressZero;\n  const LotteryInterface = new utils.Interface(abi);\n  const LotteryContract = new Contract(LotteryAddress, LotteryInterface);\n  const {\n    state,\n    send\n  } = useContractFunction(LotteryContract, \"enter\", {});\n  const amount = 0.05;\n\n  const depositEther = etherAmount => {\n    send({\n      value: utils.parseEther(amount.toString())\n    });\n  }; //const approveAndStake = ( amount: string ) => {\n  //return approvedErc20Send(LotteryAddress)\n  //}\n\n\n  return {\n    state,\n    send\n  };\n};\n\n_s(useLottery, \"8l545cn69dIbWdmgefXO6/jYYwk=\", false, function () {\n  return [useEthers, useContractFunction];\n});","map":{"version":3,"sources":["D:/programing/Blockchain/smartcontract-lottery-main/front_end/src/hooks/useLottery.ts"],"names":["useContractFunction","useEthers","Lottery","networkMapping","constants","utils","Contract","useLottery","chainId","error","abi","LotteryAddress","AddressZero","LotteryInterface","Interface","LotteryContract","state","send","amount","depositEther","etherAmount","value","parseEther","toString"],"mappings":";;AAAA,SAASA,mBAAT,EAA8BC,SAA9B,QAA+C,eAA/C;AACA,OAAOC,OAAP,MAAoB,sCAApB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAASC,SAAT,EAAqBC,KAArB,QAAkC,QAAlC;AACA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAC5B,QAAM;AAACC,IAAAA,OAAD;AAAWC,IAAAA;AAAX,MAAoBR,SAAS,EAAnC;AACA,QAAM;AAAES,IAAAA;AAAF,MAAUR,OAAhB;AACA,QAAMS,cAAc,GAAGH,OAAO,GAAGL,cAAc,CAAC,IAAD,CAAd,CAAqB,SAArB,EAAgC,CAAhC,CAAH,GAAwCC,SAAS,CAACQ,WAAhF;AACA,QAAMC,gBAAgB,GAAG,IAAIR,KAAK,CAACS,SAAV,CAAoBJ,GAApB,CAAzB;AACA,QAAMK,eAAe,GAAG,IAAIT,QAAJ,CAAaK,cAAb,EAA6BE,gBAA7B,CAAxB;AAEA,QAAM;AAAEG,IAAAA,KAAF;AAAUC,IAAAA;AAAV,MAAoBjB,mBAAmB,CAACe,eAAD,EAAkB,OAAlB,EAA4B,EAA5B,CAA7C;AACA,QAAMG,MAAM,GAAG,IAAf;;AAEA,QAAMC,YAAY,GAAIC,WAAD,IAAyB;AAC1CH,IAAAA,IAAI,CAAC;AAAEI,MAAAA,KAAK,EAAEhB,KAAK,CAACiB,UAAN,CAAiBJ,MAAM,CAACK,QAAP,EAAjB;AAAT,KAAD,CAAJ;AAAsD,GAD1D,CAV4B,CAa5B;AACG;AACH;;;AAGA,SAAO;AAAEP,IAAAA,KAAF;AAAUC,IAAAA;AAAV,GAAP;AAIH,CAtBM;;GAAMV,U;UACiBN,S,EAMAD,mB","sourcesContent":["import { useContractFunction, useEthers } from \"@usedapp/core\"\r\nimport Lottery from \"../chian-info/contracts/Lottery.json\"\r\nimport networkMapping from \"../chian-info/deployments/map.json\";\r\nimport { constants , utils } from \"ethers\";\r\nimport { Contract } from \"@ethersproject/contracts\" \r\n\r\nexport const useLottery = () => {\r\n    const {chainId , error} = useEthers()\r\n    const { abi } = Lottery\r\n    const LotteryAddress = chainId ? networkMapping[\"42\"][\"Lottery\"][0] : constants.AddressZero\r\n    const LotteryInterface = new utils.Interface(abi)\r\n    const LotteryContract = new Contract(LotteryAddress, LotteryInterface)\r\n\r\n    const { state , send  } = useContractFunction(LotteryContract, \"enter\" , {})\r\n    const amount = 0.05\r\n    \r\n    const depositEther = (etherAmount: string) => {\r\n        send({ value: utils.parseEther(amount.toString()) }) }\r\n\r\n    //const approveAndStake = ( amount: string ) => {\r\n       //return approvedErc20Send(LotteryAddress)\r\n    //}\r\n\r\n\r\n    return { state , send  }\r\n\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}